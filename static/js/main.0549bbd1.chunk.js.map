{"version":3,"sources":["whosthatpokemon.png","inputBox.js","fetchButton.js","fetchedPokemon.js","app.js","serviceWorker.js","index.js"],"names":["module","exports","InputBox","pokemon","inputNumber","keyPress","className","id","type","onKeyPress","onChange","placeholder","FetchButton","fetchPokemon","onClick","FetchedPokemon","name","img","alt","src","width","App","pokeNumber","event","setState","target","value","key","myPokemon","fetch","state","then","data","json","pokemonInfo","pokemonName","Object","values","pokemonImg","front_default","WhosThat","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,6C,4NCc5BC,G,KAXE,SAAC,GAAqC,EAAnCC,QAAoC,IAA5BC,EAA2B,EAA3BA,YAAYC,EAAe,EAAfA,SACvC,OACC,kBAAC,WAAD,KACA,yBAAKC,UAAU,KAAKC,GAAG,YACvB,mEACA,2BAAOA,GAAG,gBAAgBC,KAAK,OAAOC,WAAYJ,EAAUK,SAAUN,EAAaO,YAAY,oCCIlFC,G,MATK,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAErB,OACC,kBAAC,WAAD,KACC,4BAAQC,QAASD,GAAjB,cCMYE,G,MAVQ,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,IAE/B,OACC,yBAAKV,GAAG,aAAaD,UAAU,MAC/B,yBAAKC,GAAG,eAAeS,GACvB,yBAAKE,IAAI,UAAUX,GAAG,cAAaY,IAAKF,EAAKG,MAAM,a,wBCiDtCC,E,kDA/Cd,aAAe,IAAD,8BACb,gBAQDC,WAAa,SAACC,GACb,EAAKC,SAAS,CAACrB,QAASoB,EAAME,OAAOC,SAVxB,EAadrB,SAAW,SAACkB,GACO,UAAdA,EAAMI,KACT,EAAKC,aAfO,EAmBdA,UAAY,WACZC,MAAM,qCAAD,OAAsC,EAAKC,MAAM3B,UACpD4B,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACL,EAAKV,SAAS,CAACW,YAAaC,OAAOC,OAAOH,GAAa,MACvD,EAAKV,SAAS,CAACc,WAAYF,OAAOC,OAAOH,GAAa,IAAIK,oBAtB3D,EAAKT,MAAQ,CACZ3B,QAAS,GACTgC,YAAa,qBACbG,WAAYE,KALA,E,qDA4BJ,IAAD,EAC4BC,KAAKX,MAAjCK,EADA,EACAA,YAAaG,EADb,EACaA,WACrB,OACC,kBAAC,WAAD,KACA,gCACC,yBAAK/B,GAAG,SAAR,gBAED,8BACC,yBAAKD,UAAU,MACd,kBAAC,EAAD,CAAUF,YAAaqC,KAAKnB,WAAYjB,SAAUoC,KAAKpC,WACvD,kBAAC,EAAD,CAAaQ,aAAc4B,KAAKb,YAChC,kBAAC,EAAD,CAAgBZ,KAAMmB,EAAalB,IAAKqB,W,GAxC3BI,a,MCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0549bbd1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/whosthatpokemon.78745eb1.png\";","import React, { Fragment } from 'react';\nimport './inputBox.css'\n\nconst InputBox = ({ pokemon,inputNumber,keyPress }) => {\n\treturn (\n\t\t<Fragment>\n\t\t<div className='tc' id='inputBox'>\n\t\t<label>Type a number and get a pokemon!</label>\n\t\t<input id='pokemon-input' type=\"text\" onKeyPress={keyPress} onChange={inputNumber} placeholder='type a number from 1 to 807' />\n\t\t</div>\n\t\t</Fragment>\n\t)\n}\n\nexport default InputBox","import React, { Fragment } from 'react';\nimport './fetchbutton.css'\n\nconst FetchButton = ({fetchPokemon}) => {\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<button onClick={fetchPokemon} >Fetch !</button>\n\t\t</Fragment>\n\t)\n}\n\nexport default FetchButton;","import React from 'react';\nimport './fetchedPokemon.css'\n\nconst FetchedPokemon = ({ name, img }) => {\n\t\n\treturn (\n\t\t<div id='pokemonBox' className='tc'>\n\t\t<div id=\"pokemonName\">{name}</div>\n\t\t<img alt='pokemon' id='pokemon-img'src={img} width='200px'/>\n\t\t</div>\n\t)\t\n}\n\nexport default FetchedPokemon;","import React, { Fragment, Component } from 'react';\nimport InputBox from './inputBox'\nimport FetchButton from  './fetchButton'\nimport FetchedPokemon from './fetchedPokemon'\nimport './inputBox.css'\nimport './app.css'\nimport WhosThat from './whosthatpokemon.png'\n\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tpokemon: '',\n\t\t\tpokemonName: \"Who's that Pokemon\",\n\t\t\tpokemonImg: WhosThat\n\t\t}\n\t}\n\n\tpokeNumber = (event) => {\n\t\tthis.setState({pokemon: event.target.value })\n\t}\n\n\tkeyPress = (event) => {\n\t\tif (event.key === 'Enter'){\n\t\t\tthis.myPokemon()\n\t\t}\n\t}\n\n\tmyPokemon = () => {\n\tfetch(`https://pokeapi.co/api/v2/pokemon/${this.state.pokemon}`)\n\t\t.then(data => data.json())\n\t\t.then(pokemonInfo => {\n\t\t\tthis.setState({pokemonName: Object.values(pokemonInfo)[10]})\n\t\t\tthis.setState({pokemonImg: Object.values(pokemonInfo)[13].front_default})\n\t\t})\n\t}\n\n\trender() {\n\t\tconst { pokemonName, pokemonImg } = this.state;\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t<header>\n\t\t\t\t<div id='title'>Poke Fetch!</div>\n\t\t\t</header>\n\t\t\t<main>\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<InputBox inputNumber={this.pokeNumber} keyPress={this.keyPress}/>\n\t\t\t\t\t<FetchButton fetchPokemon={this.myPokemon}/>\n\t\t\t\t\t<FetchedPokemon name={pokemonName} img={pokemonImg}/>\n\t\t\t\t</div>\n\t\t\t</main>\n\t\t\t</Fragment>\n\t\t)\t\t\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app.js';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n   \t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}